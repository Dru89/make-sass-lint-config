var yaml = require('js-yaml');
var fs = require('fs');
var _ = require('lodash');
var pjson = require('./package.json');
var translations = require('./translations');

var sassSettings = {};
var header = {
  version: pjson.version,
  unsupported: [],
  warnings: []
};

var headerTemplate = _.template(['',
  '# sass-lint config settings generated by make-sass-lint-config v<%= version %>',
  '#',
  '# The following scss-lint Linters are not yet supported by sass-lint:',
  '# <%= unsupported.join(", ") %>',
  '#',
  '# The following settings/values are unsupported by sass-lint:',
  '# <%= warnings.join("\\n# ") %>',
  '#'
  ].join('\n'));

var scssSettings = yaml.safeLoad(fs.readFileSync(process.argv[2], 'utf8')).linters;

_.forEach(scssSettings, function (linterValue, linterName) {
  var severity;
  var translatedSettings = {};
  var translation = translations[linterName];

  if (translation) {
    _.forEach(linterValue, function (optionValue, optionName) {
      if (optionName === 'enabled') {
        // if (translation.invert) {
        //   severity = optionValue ? 0 : 1
        // } else {
        //   severity = optionValue ? 1 : 0
        // }
        severity = optionValue ? 1 : 0;
        return;
      }

      var optionTranslation = translation.options ? translation.options[optionName] : false;

      if (!optionTranslation) {
        header.warnings.push('Linter ' + linterName + ', option "' + optionName + '"');
      }
      else if (optionTranslation.values) {
        if (_.has(optionTranslation.values, optionValue)) {
          translatedSettings[optionTranslation.name] = optionTranslation.values[optionValue];
        }
        else {
          header.warnings.push('Linter ' + linterName + ', option "' + optionName + '" with value "' + optionValue + '"');
        }
      }
      else {
        translatedSettings[optionTranslation.name] = optionValue;
      }
    });

    if (_.isEmpty(translatedSettings)) {
      sassSettings[translation.name] = severity;
    }
    else {
      sassSettings[translation.name] = [severity, translatedSettings];
    }
  }
  else {
    header.unsupported.push(linterName);
  }
});

console.log(headerTemplate(header));
console.log(yaml.safeDump(
  {
    options: {
      'merge-default-rules': false
    },
    rules: sassSettings
  },
  {
    sortKeys: true
  }));


// console.log(scssSettings)
// console.log(unsupported)
// console.log(ignored)
