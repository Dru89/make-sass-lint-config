/* globals _, jsyaml, CodeMirror, document */

var pjson = require('./package.json');
var translations = require('./translations');

var source, result;

var headerTemplate = _.template(['#',
  '# sass-lint config settings generated by make-sass-lint-config v<%= version %>',
  '#',
  '# The following scss-lint Linters are not yet supported by sass-lint:',
  '# <%= unsupported.join(", ") %>',
  '#',
  '# The following settings/values are unsupported by sass-lint:',
  '# <%= warnings.join("\\n# ") %>',
  '#'
  ].join('\n'));

var convert = function () {
  var sassSettings = {};
  var header = {
    version: pjson.version,
    unsupported: [],
    warnings: []
  };
  var scssSettings = jsyaml.safeLoad(source.getValue()).linters;

  _.forEach(scssSettings, function (linterValue, linterName) {
    var severity;
    var translatedSettings = {};
    var translation = translations[linterName];

    if (translation) {
      _.forEach(linterValue, function (optionValue, optionName) {
        if (optionName === 'enabled') {
          // if (translation.invert) {
          //   severity = optionValue ? 0 : 1
          // } else {
          //   severity = optionValue ? 1 : 0
          // }
          severity = optionValue ? 1 : 0;
          return;
        }

        var optionTranslation = translation.options ? translation.options[optionName] : false;

        if (!optionTranslation) {
          header.warnings.push('Linter ' + linterName + ', option "' + optionName + '"');
        }
        else if (optionTranslation.values) {
          if (_.has(optionTranslation.values, optionValue)) {
            translatedSettings[optionTranslation.name] = optionTranslation.values[optionValue];
          }
          else {
            header.warnings.push('Linter ' + linterName + ', option "' + optionName + '" with value "' + optionValue + '"');
          }
        }
        else {
          translatedSettings[optionTranslation.name] = optionValue;
        }
      });

      if (_.isEmpty(translatedSettings)) {
        sassSettings[translation.name] = severity;
      }
      else {
        sassSettings[translation.name] = [severity, translatedSettings];
      }
    }
    else {
      header.unsupported.push(linterName);
    }
  });

  result.setValue(headerTemplate(header) + jsyaml.safeDump(
      {
        options: {
          'merge-default-rules': false
        },
        rules: sassSettings
      },
      {
        sortKeys: true
      }));
};

document.addEventListener('DOMContentLoaded', function () {
  source = CodeMirror.fromTextArea(document.getElementById('source'), {
    mode: 'yaml',
    undoDepth: 1
  });

  source.on('change', _.throttle(convert, 500));

  result = CodeMirror.fromTextArea(document.getElementById('result'), {
    readOnly: true
  });
});
