/* globals _, jsyaml, CodeMirror, document */

var pjson = require('./package.json');
var translations = require('./translations');

var source, result;

var headerTemplate = _.template([
  '# sass-lint config generated by make-sass-lint-config v<%= version %>',
  '#',
  '# The following scss-lint Linters are not yet supported by sass-lint:',
  '# <%= _.map(_.chunk(unsupported, 4), function (arr) { return arr.join(", "); }).join("\\n# ") %>',
  '#',
  '# The following settings/values are unsupported by sass-lint:',
  '# <%= warnings.join("\\n# ") %>\n\n'
].join('\n'));

var convert = function () {
  var sassSettings = {
        options: {
          formatter: 'stylish',
          'merge-default-rules': false
        },
        files: {
          include: '**/*.s+(a|c)ss'
        },
        rules: {}
      },
      header = {
        version: pjson.version,
        unsupported: [],
        warnings: []
      },
      scssSettings = jsyaml.safeLoad(source.getValue());

  if (scssSettings.scss_files) {
    sassSettings.files.include = scssSettings.scss_files;
  }

  _.forEach(scssSettings.linters, function (linterValue, linterName) {
    var severity,
        translatedSettings = {},
        translation = translations[linterName];

    if (translation && translation.special_case) {
      if (linterValue.enabled) {
        translation.special_case(linterValue, sassSettings);
      }
    }
    else if (translation) {
      _.forEach(linterValue, function (optionValue, optionName) {
        if (optionName === 'enabled') {
          // if (translation.invert) {
          //   severity = optionValue ? 0 : 1
          // } else {
          //   severity = optionValue ? 1 : 0
          // }
          severity = optionValue ? 1 : 0;
          return;
        }

        var optionTranslation = translation.options ? translation.options[optionName] : false;

        if (!optionTranslation) {
          header.warnings.push('Linter ' + linterName + ', option "' + optionName + '"');
        }
        else if (optionTranslation.values) {
          if (_.has(optionTranslation.values, optionValue)) {
            translatedSettings[optionTranslation.name] = optionTranslation.values[optionValue];
          }
          else {
            header.warnings.push('Linter ' + linterName + ', option "' + optionName + '" with value "' + optionValue + '"');
          }
        }
        else {
          translatedSettings[optionTranslation.name] = optionValue;
        }
      });

      if (_.isEmpty(translatedSettings)) {
        sassSettings.rules[translation.name] = severity;
      }
      else {
        sassSettings.rules[translation.name] = [severity, translatedSettings];
      }
    }
    else {
      header.unsupported.push(linterName);
    }
  });

  result.setValue(headerTemplate(header) + jsyaml.safeDump(sassSettings, { sortKeys: true }));
};

document.addEventListener('DOMContentLoaded', function () {
  source = CodeMirror.fromTextArea(document.getElementById('source'), {
    mode: 'yaml',
    undoDepth: 1,
    lineWrapping: true,
    lineNumbers: true,
    viewportMargin: Infinity
  });

  result = CodeMirror.fromTextArea(document.getElementById('result'), {
    readOnly: true,
    lineWrapping: true,
    lineNumbers: true,
    viewportMargin: Infinity
  });

  source.on('change', _.throttle(convert, 500));
  convert();
});
